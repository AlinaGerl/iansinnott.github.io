{"version":3,"sources":["webpack:///path---managing-state-and-controlled-form-fields-with-react-f423569b1354f925b8e8.js","webpack:///./.cache/json/managing-state-and-controlled-form-fields-with-react.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/managing-state-and-controlled-form-fields-with-react.json","module","exports","data","post","html","frontmatter","created","title","pathContext","id","next","slug","prev"],"mappings":"AAAAA,cAAc,oBAERC,8GACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,u62BAAqm3BC,aAAorBC,QAAA,2BAAAC,MAAA,0DAAsGC,aAAgBC,GAAA,oKAAAC,MAAiLL,aAAeE,MAAA,6CAAAD,QAAA,4BAA0FK,KAAA,8CAAqDC,MAASP,aAAeE,MAAA,0CAAAD,QAAA,4BAAuFK,KAAA","file":"path---managing-state-and-controlled-form-fields-with-react-f423569b1354f925b8e8.js","sourcesContent":["webpackJsonp([9512336591442520000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/managing-state-and-controlled-form-fields-with-react.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"html\":\"<p><strong>UPDATE (2016-07-28):</strong> As of React v15 <code>valueLink</code> and <code>checkedLink</code> are officially deprecated. I heavily advocate the use of both of these APIs in this article. If you want to see my thoughts on the deprecation see <a href=\\\"#comment-2692300179\\\">this comment below</a>. For the official deprecation see <a href=\\\"https://facebook.github.io/react/docs/two-way-binding-helpers.html\\\">the docs article here</a>.</p>\\n<hr>\\n<p>With React, you basically get two different ways to deal with forms:</p>\\n<ul>\\n<li>Standard input elements that can be modified by the user</li>\\n<li>\\\"Controlled\\\" input elements that can only be modified programatically</li>\\n</ul>\\n<p>The first type is pretty straightforward in React, you simply don't provide a <code>value</code> prop:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  render <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'text'</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The value of that <code>&#x3C;input></code> element can be edited by the user in a browser, just like one would expect in a normal we app.</p>\\n<p>The other type of input—a \\\"Controlled\\\" input—looks almost the same, but has a <code>value</code> property:</p>\\n<!-- more -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  render <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'text'</span> value<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"You can't change me!\\\"</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The value of this <code>&#x3C;input></code> element will stubbornly refuse to change no matter what the user does. This is generally a terrible user experience, so React will actually warn you that your input cannot be modified:</p>\\n<p><img src=\\\"https://dropsinn.s3.amazonaws.com/Screen%20Shot%202015-05-11%20at%2011.12.36%20PM.png\\\" alt=\\\"React warning message\\\"></p>\\n<p>If you're new-ish to React you might not know why you would want to do this. The answer is <em>state</em>. React puts a big emphasis on explicitly keeping your components state in the <code>state</code> property. So in order to create a form input that responds to user input you will need to use two-way data binding. Meaning the <code>value</code> of the <code>&#x3C;input></code> element will flow from your component into the DOM, but also from the DOM into your component. In other words, they will be kept in sync.</p>\\n<h2>Manual Two-way data binding</h2>\\n<p>The most common way to accomplish two-way data binding in React is to be explicit. This is by design, and it's a good practice for smaller forms. Here's how an example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">getInitialState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    inputValue<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>input\\n        type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'text'</span>\\n        value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>inputValue<span class=\\\"token punctuation\\\">}</span>\\n        onChange<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onChange<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">onChange</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> inputValue<span class=\\\"token punctuation\\\">:</span> e<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Here we've bound our input's change event to the component's <code>onChange</code> function which will update <code>this.state</code>. Whenever <code>this.state</code> is updated the component will be re-rendered, causing the input value to reflect what the user typed.</p>\\n<p>If that's not quite clear, I highly recommend taking a look at the <a href=\\\"https://facebook.github.io/react/docs/forms.html\\\">Forms guide on the React website</a>.</p>\\n<p>The code above is explicit and not overly complicated, which is great for maintainabillty. There are virtually no downsides to this approach when dealing with a small form that only contains a few inputs. Issues only begin to crop up when you have many inputs that all need to update state.</p>\\n<p>That's why we have...</p>\\n<h2>The LinkedStateMixin</h2>\\n<p>React comes with a handy mixin to help you achieve two-way data-binding very quickly. Use the LinkedStateMixin to save yourself soem hassle when wiring up large forms to stay in sync with component state:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Make sure to require react with addons</span>\\n<span class=\\\"token keyword\\\">var</span> React <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'react/addons'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReact<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  mixins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>React<span class=\\\"token punctuation\\\">.</span>addons<span class=\\\"token punctuation\\\">.</span>LinkedStateMixin<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">getInitialState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    inputValue<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'text'</span> valueLink<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">linkState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'inputValue'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>As you can see we replaced the <code>value</code> prop with <code>valueLink</code>. If you haven't heard of <code>valueLink</code> I'll explain it in a sec.</p>\\n<p>The <code>LinkedStateMixin</code> saves us a good deal of typing, and especially when you have a large number of form fields that need to be tied to component state. The issue is that it's not very flexible. Essentially it just binds the value of an input field to <code>this.state</code>. But what if you are building a <em>stateless</em> form component that gets all it's values from props? Or, more interestingly, what if you are using Flux and don't want to set state directly but rather call an action that updates a store?</p>\\n<p>This is what <code>valueLink</code> is great for.</p>\\n<h2>What exactly is <code>valueLink</code>?</h2>\\n<p>The <code>valueLink</code> prop is a fairly under-documented feature of form inputs in React that simplifies the onChange / setState pattern described at the beginning of this post. It's a shortcut for telling an input where to get its <code>value</code> prop from and what function to call when an <code>onChange</code> event is fired. In it's most simple form the <code>valueLink</code> prop points to a plain old JS object with two distinct props:</p>\\n<ul>\\n<li><code>value</code>: The value of the input at any given time</li>\\n<li><code>requestChange</code>: The function to call whenever <code>onChange</code> is fired on the input. <code>requestChange</code> will be called with the update value of the input, so there's no need to access the value using an event object as you might do if you were using the actual <code>onChange</code> event.</li>\\n</ul>\\n<p>If you're familiar with React's PropTypes feature then this expression of <code>valueLink</code> as a <code>propType</code> should make it clear what you're going for:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  propTypes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    valueLink<span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shape</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      value<span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>PropTypes<span class=\\\"token punctuation\\\">.</span>any<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n      requestChange<span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>PropTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">.</span>isRequired\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>Manually linking input value to state with <code>valueLink</code></h2>\\n<p>Let's check out an example.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">makeValueLink</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    requestChange<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      newState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      newState<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>newState<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nReact<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">getInitialState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    inputValue<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'text'</span> valueLink<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">makeValueLink</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'inputValue'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Now you will get the same two-way data binding as you did when using the <code>LinkedStateMixin</code>. What we've done here is basically created our own version of the <code>LinkedStateMixin</code> to demonstrate how <code>valueLink</code> works.</p>\\n<p>You can use <code>valueLink</code> to bind the <code>value</code> prop of any input to the state of a component. If you instead want to set state on a parent component you can pass a <code>valueLink</code> down as a prop just like you would do with an <code>onChange</code> callback.</p>\\n<h4>Don't forget about <code>checkedLink</code></h4>\\n<p>The other important point to note is that some input types, namely <code>&#x3C;input type='radio'></code> and <code>&#x3C;input type='checkbox'></code> use the <code>checked</code> prop because they represent boolean values. They still use a <code>value</code> prop to determine what value corresponds to the <code>checked</code> prop, but it's only the <code>checked</code> prop that can be changed by the user.</p>\\n<p>React acknowledges this and provides us with the <code>checkedLink</code> prop, which works exactly like <code>valueLink</code> except it binds the <code>checked</code> prop to state instead of the <code>value</code> prop.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">makeValueLink</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    requestChange<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      newState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      newState<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>newState<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nReact<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">getInitialState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    booleanValue<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'checkbox'</span> checkedLink<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">makeValueLink</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'booleanValue'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Note that when using <code>checkedLink</code> the shape of the object you pass in is still exactly the same, i.e. it needs a <code>value</code> prop and a <code>requestChange</code> prop. This is good because it means we can use our <code>makeValueLink</code> function to bind any type of input to state including checkboxes and radios.</p>\\n<h2>Putting it all together—Building a Flux form</h2>\\n<p>The importance of <code>valueLink</code> really shines when you're using something like Flux where you don't actually want to update <code>this.state</code> directly but would like instead for data to flow through actions to stores which control the UI state. Using <code>valueLink</code> makes this is quite easy:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> AppActions <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./AppActions'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">makeValueLink</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    requestChange<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      AppActions<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n * This code is written much like you would if you were using the Alt Flux\\n * implementation. The syntax would likely be slightly different with other\\n * libraries.\\n */</span>\\nReact<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Assuming our store (AppStore) has a getState method, we would get the</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// initial state like so</span>\\n  <span class=\\\"token function\\\">getInitialState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> AppStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Listen to our store for changes</span>\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    AppStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Stop listening if this component is unmounted</span>\\n  <span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    AppStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlisten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Whenever our store emits a change event, update `this.state` to reflect</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// the state of the store.</span>\\n  <span class=\\\"token function\\\">onChange</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>AppStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'checkbox'</span> checkedLink<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">makeValueLink</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'booleanValue'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Now whenever you check the checkbox <code>AppActions.doSomething</code> will be called with a <code>key</code> of <code>'booleanValue'</code> and a <code>newValue</code> of either <code>true</code> or <code>false</code> depending on whether or not it is checked.</p>\\n<p>Then in <code>AppActions</code> you would do whatever you want with the data and most likely dispatch it to all stores so they could update their state accordingly. <code>AppStore</code> would get the dispatch and update it's internal representation of state</p>\\n<p>Hope all this helps as you build forms with React.</p>\",\"frontmatter\":{\"created\":\"2015-05-11T07:00:00.000Z\",\"title\":\"Managing state and controlled form fields with React\"}}},\"pathContext\":{\"id\":\"/Users/jandrix/dev/sites/blog.iansinnott.com/content/_posts/2015-05-11-managing-state-and-controlled-form-fields-with-react.md absPath of file >>> MarkdownRemark\",\"next\":{\"frontmatter\":{\"title\":\"In search of the ultimate tooling workflow\",\"created\":\"2015-05-03T07:00:00.000Z\"},\"slug\":\"in-search-of-the-ultimate-tooling-workflow\"},\"prev\":{\"frontmatter\":{\"title\":\"Use SSH ForwardAgent for fun and profit\",\"created\":\"2015-07-20T07:00:00.000Z\"},\"slug\":\"use-ssh-forwardagent-for-fun-and-profit\"}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---managing-state-and-controlled-form-fields-with-react-f423569b1354f925b8e8.js","module.exports = {\"data\":{\"post\":{\"html\":\"<p><strong>UPDATE (2016-07-28):</strong> As of React v15 <code>valueLink</code> and <code>checkedLink</code> are officially deprecated. I heavily advocate the use of both of these APIs in this article. If you want to see my thoughts on the deprecation see <a href=\\\"#comment-2692300179\\\">this comment below</a>. For the official deprecation see <a href=\\\"https://facebook.github.io/react/docs/two-way-binding-helpers.html\\\">the docs article here</a>.</p>\\n<hr>\\n<p>With React, you basically get two different ways to deal with forms:</p>\\n<ul>\\n<li>Standard input elements that can be modified by the user</li>\\n<li>\\\"Controlled\\\" input elements that can only be modified programatically</li>\\n</ul>\\n<p>The first type is pretty straightforward in React, you simply don't provide a <code>value</code> prop:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  render <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'text'</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The value of that <code>&#x3C;input></code> element can be edited by the user in a browser, just like one would expect in a normal we app.</p>\\n<p>The other type of input—a \\\"Controlled\\\" input—looks almost the same, but has a <code>value</code> property:</p>\\n<!-- more -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  render <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'text'</span> value<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"You can't change me!\\\"</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The value of this <code>&#x3C;input></code> element will stubbornly refuse to change no matter what the user does. This is generally a terrible user experience, so React will actually warn you that your input cannot be modified:</p>\\n<p><img src=\\\"https://dropsinn.s3.amazonaws.com/Screen%20Shot%202015-05-11%20at%2011.12.36%20PM.png\\\" alt=\\\"React warning message\\\"></p>\\n<p>If you're new-ish to React you might not know why you would want to do this. The answer is <em>state</em>. React puts a big emphasis on explicitly keeping your components state in the <code>state</code> property. So in order to create a form input that responds to user input you will need to use two-way data binding. Meaning the <code>value</code> of the <code>&#x3C;input></code> element will flow from your component into the DOM, but also from the DOM into your component. In other words, they will be kept in sync.</p>\\n<h2>Manual Two-way data binding</h2>\\n<p>The most common way to accomplish two-way data binding in React is to be explicit. This is by design, and it's a good practice for smaller forms. Here's how an example:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">getInitialState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    inputValue<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>input\\n        type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'text'</span>\\n        value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>inputValue<span class=\\\"token punctuation\\\">}</span>\\n        onChange<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onChange<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">onChange</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> inputValue<span class=\\\"token punctuation\\\">:</span> e<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Here we've bound our input's change event to the component's <code>onChange</code> function which will update <code>this.state</code>. Whenever <code>this.state</code> is updated the component will be re-rendered, causing the input value to reflect what the user typed.</p>\\n<p>If that's not quite clear, I highly recommend taking a look at the <a href=\\\"https://facebook.github.io/react/docs/forms.html\\\">Forms guide on the React website</a>.</p>\\n<p>The code above is explicit and not overly complicated, which is great for maintainabillty. There are virtually no downsides to this approach when dealing with a small form that only contains a few inputs. Issues only begin to crop up when you have many inputs that all need to update state.</p>\\n<p>That's why we have...</p>\\n<h2>The LinkedStateMixin</h2>\\n<p>React comes with a handy mixin to help you achieve two-way data-binding very quickly. Use the LinkedStateMixin to save yourself soem hassle when wiring up large forms to stay in sync with component state:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Make sure to require react with addons</span>\\n<span class=\\\"token keyword\\\">var</span> React <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'react/addons'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nReact<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  mixins<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>React<span class=\\\"token punctuation\\\">.</span>addons<span class=\\\"token punctuation\\\">.</span>LinkedStateMixin<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">getInitialState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    inputValue<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'text'</span> valueLink<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">linkState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'inputValue'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>As you can see we replaced the <code>value</code> prop with <code>valueLink</code>. If you haven't heard of <code>valueLink</code> I'll explain it in a sec.</p>\\n<p>The <code>LinkedStateMixin</code> saves us a good deal of typing, and especially when you have a large number of form fields that need to be tied to component state. The issue is that it's not very flexible. Essentially it just binds the value of an input field to <code>this.state</code>. But what if you are building a <em>stateless</em> form component that gets all it's values from props? Or, more interestingly, what if you are using Flux and don't want to set state directly but rather call an action that updates a store?</p>\\n<p>This is what <code>valueLink</code> is great for.</p>\\n<h2>What exactly is <code>valueLink</code>?</h2>\\n<p>The <code>valueLink</code> prop is a fairly under-documented feature of form inputs in React that simplifies the onChange / setState pattern described at the beginning of this post. It's a shortcut for telling an input where to get its <code>value</code> prop from and what function to call when an <code>onChange</code> event is fired. In it's most simple form the <code>valueLink</code> prop points to a plain old JS object with two distinct props:</p>\\n<ul>\\n<li><code>value</code>: The value of the input at any given time</li>\\n<li><code>requestChange</code>: The function to call whenever <code>onChange</code> is fired on the input. <code>requestChange</code> will be called with the update value of the input, so there's no need to access the value using an event object as you might do if you were using the actual <code>onChange</code> event.</li>\\n</ul>\\n<p>If you're familiar with React's PropTypes feature then this expression of <code>valueLink</code> as a <code>propType</code> should make it clear what you're going for:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  propTypes<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    valueLink<span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shape</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      value<span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>PropTypes<span class=\\\"token punctuation\\\">.</span>any<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n      requestChange<span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>PropTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">.</span>isRequired\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h2>Manually linking input value to state with <code>valueLink</code></h2>\\n<p>Let's check out an example.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">makeValueLink</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    requestChange<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      newState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      newState<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>newState<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nReact<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">getInitialState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    inputValue<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'text'</span> valueLink<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">makeValueLink</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'inputValue'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Now you will get the same two-way data binding as you did when using the <code>LinkedStateMixin</code>. What we've done here is basically created our own version of the <code>LinkedStateMixin</code> to demonstrate how <code>valueLink</code> works.</p>\\n<p>You can use <code>valueLink</code> to bind the <code>value</code> prop of any input to the state of a component. If you instead want to set state on a parent component you can pass a <code>valueLink</code> down as a prop just like you would do with an <code>onChange</code> callback.</p>\\n<h4>Don't forget about <code>checkedLink</code></h4>\\n<p>The other important point to note is that some input types, namely <code>&#x3C;input type='radio'></code> and <code>&#x3C;input type='checkbox'></code> use the <code>checked</code> prop because they represent boolean values. They still use a <code>value</code> prop to determine what value corresponds to the <code>checked</code> prop, but it's only the <code>checked</code> prop that can be changed by the user.</p>\\n<p>React acknowledges this and provides us with the <code>checkedLink</code> prop, which works exactly like <code>valueLink</code> except it binds the <code>checked</code> prop to state instead of the <code>value</code> prop.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">makeValueLink</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    requestChange<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      newState <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      newState<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> newValue<span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>newState<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nReact<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">getInitialState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    booleanValue<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">''</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'checkbox'</span> checkedLink<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">makeValueLink</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'booleanValue'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Note that when using <code>checkedLink</code> the shape of the object you pass in is still exactly the same, i.e. it needs a <code>value</code> prop and a <code>requestChange</code> prop. This is good because it means we can use our <code>makeValueLink</code> function to bind any type of input to state including checkboxes and radios.</p>\\n<h2>Putting it all together—Building a Flux form</h2>\\n<p>The importance of <code>valueLink</code> really shines when you're using something like Flux where you don't actually want to update <code>this.state</code> directly but would like instead for data to flow through actions to stores which control the UI state. Using <code>valueLink</code> makes this is quite easy:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token keyword\\\">var</span> AppActions <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./AppActions'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">makeValueLink</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    requestChange<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>newValue<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      AppActions<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">doSomething</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> newValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">/**\\n * This code is written much like you would if you were using the Alt Flux\\n * implementation. The syntax would likely be slightly different with other\\n * libraries.\\n */</span>\\nReact<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Assuming our store (AppStore) has a getState method, we would get the</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// initial state like so</span>\\n  <span class=\\\"token function\\\">getInitialState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> AppStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Listen to our store for changes</span>\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    AppStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">listen</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Stop listening if this component is unmounted</span>\\n  <span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    AppStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">unlisten</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>onChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Whenever our store emits a change event, update `this.state` to reflect</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// the state of the store.</span>\\n  <span class=\\\"token function\\\">onChange</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>AppStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>input type<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'checkbox'</span> checkedLink<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">makeValueLink</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'booleanValue'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Now whenever you check the checkbox <code>AppActions.doSomething</code> will be called with a <code>key</code> of <code>'booleanValue'</code> and a <code>newValue</code> of either <code>true</code> or <code>false</code> depending on whether or not it is checked.</p>\\n<p>Then in <code>AppActions</code> you would do whatever you want with the data and most likely dispatch it to all stores so they could update their state accordingly. <code>AppStore</code> would get the dispatch and update it's internal representation of state</p>\\n<p>Hope all this helps as you build forms with React.</p>\",\"frontmatter\":{\"created\":\"2015-05-11T07:00:00.000Z\",\"title\":\"Managing state and controlled form fields with React\"}}},\"pathContext\":{\"id\":\"/Users/jandrix/dev/sites/blog.iansinnott.com/content/_posts/2015-05-11-managing-state-and-controlled-form-fields-with-react.md absPath of file >>> MarkdownRemark\",\"next\":{\"frontmatter\":{\"title\":\"In search of the ultimate tooling workflow\",\"created\":\"2015-05-03T07:00:00.000Z\"},\"slug\":\"in-search-of-the-ultimate-tooling-workflow\"},\"prev\":{\"frontmatter\":{\"title\":\"Use SSH ForwardAgent for fun and profit\",\"created\":\"2015-07-20T07:00:00.000Z\"},\"slug\":\"use-ssh-forwardagent-for-fun-and-profit\"}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/managing-state-and-controlled-form-fields-with-react.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/managing-state-and-controlled-form-fields-with-react.json\n// module chunks = 9512336591442520000"],"sourceRoot":""}